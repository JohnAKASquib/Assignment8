{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","getStyle","color","borderStyle","borderColor","backgroundColor","state","display","height","width","handleClick","setState","defColor","console","log","this","style","onClick","Component","TableRow","Array","length","fill","Table","tablerows","rows","cols","App","handleAddRow","handleAddColumn","handleColorChange","e","selectedColor","target","value","currColor","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAoCeA,E,kDAjCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,SAAW,SAACC,GACV,MAAO,CACLC,YAAa,QACbC,YAAa,QACbC,gBAAiB,EAAKC,MAAMJ,MAC5BK,QAAS,eACTC,OAAQ,OACRC,MAAO,UAbQ,EAiBnBC,YAAc,WAEZ,EAAKC,SAAS,CAAET,MAAO,EAAKF,MAAME,SAjBlC,EAAKI,MAAQ,CACXM,SAAU,EAAKZ,MAAMY,UAHN,E,qDAwBjB,OADAC,QAAQC,IAAI,6BAA+BC,KAAKf,MAAME,OAEpD,wBACEc,MAAOD,KAAKd,SAASc,KAAKT,MAAMM,UAChCK,QAASF,KAAKL,kB,GA5BEQ,aCaTC,E,uKAVX,OACE,4BACGC,MAAML,KAAKf,MAAMqB,QAAQC,KACxB,kBAAC,EAAD,CAAWpB,MAAOa,KAAKf,MAAME,MAAOU,SAAUG,KAAKf,MAAMY,iB,GAL5CM,aCwBRK,E,uKApBX,IAAIC,EAAY,IAAIJ,MAAML,KAAKf,MAAMyB,MAErC,OACE,+BACE,+BACGD,EAAUF,KACT,6BACE,kBAAC,EAAD,CACED,OAAQN,KAAKf,MAAM0B,KACnBxB,MAAOa,KAAKf,MAAME,MAClBU,SAAUG,KAAKf,MAAMY,mB,GAdjBM,aC+CLS,G,wDA7Cb,aAAe,IAAD,8BACZ,gBASFC,aAAe,WACb,EAAKjB,SAAS,CAAEc,KAAM,EAAKnB,MAAMmB,KAAO,KAX5B,EAcdI,gBAAkB,WAChB,EAAKlB,SAAS,CAAEe,KAAM,EAAKpB,MAAMoB,KAAO,KAf5B,EAkBdI,kBAAoB,SAACC,GACnB,EAAKpB,SAAS,CAAEqB,cAAeD,EAAEE,OAAOC,SAjBxC,EAAK5B,MAAQ,CACXmB,KAAM,EACNC,KAAM,EACNS,UAAW,QACXH,cAAe,IANL,E,qDAuBZ,OACE,6BACE,4BAAQI,SAAUrB,KAAKe,mBACrB,4BAAQI,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,QAEF,4BAAQjB,QAASF,KAAKa,cAAtB,WACA,4BAAQX,QAASF,KAAKc,iBAAtB,cACA,kBAAC,EAAD,CACEJ,KAAMV,KAAKT,MAAMmB,KACjBC,KAAMX,KAAKT,MAAMoB,KACjBd,SAAUG,KAAKT,MAAM6B,UACrBjC,MAAOa,KAAKT,MAAM0B,qB,GAvCVd,cCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.872f8599.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TableCell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      defColor: this.props.defColor,\r\n    };\r\n  }\r\n  getStyle = (color) => {\r\n    return {\r\n      borderStyle: \"solid\",\r\n      borderColor: \"black\",\r\n      backgroundColor: this.state.color,\r\n      display: \"inline-block\",\r\n      height: \"50px\",\r\n      width: \"125px\",\r\n    };\r\n  };\r\n\r\n  handleClick = () => {\r\n    //console.log(this.state.color);\r\n    this.setState({ color: this.props.color });\r\n  };\r\n\r\n  render() {\r\n    console.log(\"In tableCell the color is:\" + this.props.color);\r\n    return (\r\n      <td\r\n        style={this.getStyle(this.state.defColor)}\r\n        onClick={this.handleClick}\r\n      ></td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableCell;\r\n","import React, { Component } from \"react\";\r\nimport TableCell from \"./TableCell\";\r\n\r\nclass TableRow extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        {Array(this.props.length).fill(\r\n          <TableCell color={this.props.color} defColor={this.props.defColor} />\r\n        )}\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { Component } from \"react\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    // console.log(\"Props is: \" + this.props.color);\r\n\r\n    let tablerows = new Array(this.props.rows);\r\n\r\n    return (\r\n      <table>\r\n        <tbody>\r\n          {tablerows.fill(\r\n            <div>\r\n              <TableRow\r\n                length={this.props.cols}\r\n                color={this.props.color}\r\n                defColor={this.props.defColor}\r\n              />\r\n            </div>\r\n          )}\r\n        </tbody>\r\n        {/* <tbody>{tablerows}</tbody>*/}\r\n      </table>\r\n    );\r\n  }\r\n}\r\nexport default Table;\r\n","import React, { Component } from \"react\";\nimport Table from \"./components/Table\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      rows: 4,\n      cols: 3,\n      currColor: \"white\",\n      selectedColor: \"\",\n    };\n  }\n  //increase rows by 1\n  handleAddRow = () => {\n    this.setState({ rows: this.state.rows + 1 });\n  };\n  //increase columns by 1\n  handleAddColumn = () => {\n    this.setState({ cols: this.state.cols + 1 });\n  };\n  //set color in state\n  handleColorChange = (e) => {\n    this.setState({ selectedColor: e.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <select onChange={this.handleColorChange}>\n          <option value=\"white\">White</option>\n          <option value=\"black\">Black</option>\n          <option value=\"green\">Green</option>\n          <option value=\"blue\">Blue</option>\n          <option value=\"red\">Red</option>\n        </select>\n        <button onClick={this.handleAddRow}>Add Row</button>\n        <button onClick={this.handleAddColumn}>Add Column</button>\n        <Table\n          rows={this.state.rows}\n          cols={this.state.cols}\n          defColor={this.state.currColor}\n          color={this.state.selectedColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}